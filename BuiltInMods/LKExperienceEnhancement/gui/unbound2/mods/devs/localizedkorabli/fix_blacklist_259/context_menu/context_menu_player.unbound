(def element ContextMenuPlayer (_playerEntity:gfx, _selfPlayer:dhEntity)
	(scope
		(macro PULL_CURRENT_TOP_WINDOW_NAME)
		(var isInBattleLoading:bool =	"currentTopWindowName == BATTLE_STATS_STATES.BATTLE_LOADING || currentTopWindowName == BATTLE_STATS_STATES.FIRST_BATTLE_LOADING")

		
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var battleType:str =		"battleDataEntity.battleInfo.battleType")

		
		(var selfDivisionMember:dhComponent = "_selfPlayer.divisionMember")
		(var isSelfDivisionCommander:bool =	"selfDivisionMember.isDivisionCommander"	(event "selfDivisionMember.evIsDivisionCommanderUpdated"))
		(var selfDivisionId:number =			"selfDivisionMember.divisionId"				(event "selfDivisionMember.evDivisionChanged"))

		(var isSelfAlive:bool =				"_selfPlayer.playerAvatar.isAlive" 			(event "_selfPlayer.playerAvatar.evIsAliveChanged"))

		(var isBot:bool = 					"_playerEntity.avatar.isBot")
		(var isPlayerMessagesMuted:bool =	"_playerEntity.avatar.mute" 				(event "_playerEntity.avatar.evMuteChanged"))
		(var isPlayerAlive:bool =			"_playerEntity.health.isAlive"				(event "_playerEntity.health.evIsAliveChanged"))
		(var isLeaver:bool =				"_playerEntity.avatar.isLeaver"				(event "_playerEntity.avatar.evIsLeaverChanged"))
		(var isSuspended:bool =				"_playerEntity.accountSimple.suspended"		(event "_playerEntity.accountSimple.evSuspendedChanged"))
		(var isIgnored:bool =				"_playerEntity.contact.isIgnored"			(event "_playerEntity.contact.evIsIgnoredChanged") (event "_playerEntity.evAdded") (event "_playerEntity.evRemoved"))

		
		(var divisionMembers:gfx =			"selfDivisionId > NONE_DIVISION_ID	? $datahub.getCollectionByPath(CC.divisionMember, 'byDivisionId.' + selfDivisionId)
																				: null")
		(var divisionMembersCount:gfx =	"divisionMembers ? divisionMembers.items.length : 0" (event "divisionMembers.evAdded") (event "divisionMembers.evRemoved"))
		
		(var invitedPlayersMembers:gfx =		"$datahub.getCollection(CC.playerInvitedToPrebattleInfo)")
		(var invitedPlayersMembersCount:gfx =	"invitedPlayersMembers.items.length" (event "invitedPlayersMembers.evAdded") (event "invitedPlayersMembers.evRemoved"))
		(var isFreePlacesInDivision:bool =	"divisionMembers ? (divisionMembersCount + invitedPlayersMembersCount) < MAX_DYNAMIC_DIVISION_PARTICIPANTS_COUNT : true")

		(var invitedPlayerWatcher:gfx =		"$datahub.getPrimWatcher(CC.preBattlePlayerSimple, _playerEntity.avatar.id)")
		(var invitedPlayerEntity:gfx =		"invitedPlayerWatcher.entity" (event "invitedPlayerWatcher.event"))
		(var relationComponent:gfx =		"_playerEntity ? _playerEntity.relation : null")
		(var isEnemy:bool =					"relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ENEMY" (event "relationComponent.evChanged"))

		(var divisionMember:gfx =			"_playerEntity.divisionMember")
		(var division:number =				"divisionMember.division"					(event "divisionMember.evDivisionChanged"))
		(var isInSameDivision:bool =		"divisionMember.isInSameDivision"			(event "divisionMember.evDivisionChanged"))
		(var isInSameDivisionOnStart:bool = "divisionMember.isInSameDivisionOnStart")

		(var battleInvite:gfx =				"_playerEntity.battleInvite")
		(var invitationsEnabled:bool =		"battleInvite.invitationsEnabled"			(event "battleInvite.evInvitationsEnabledChanged"))
		(var inviteCooldown:number =		"battleInvite.inviteCooldown"				(event "battleInvite.evInviteCooldownChanged"))
		(var inviteCooldownEnabled:bool =	"battleInvite.inviteCooldownEnabled"		(event "battleInvite.evInviteCooldownEnabledChanged"))

		(var timer:gfx =					"$datahub.getSingleComponent(CC.timer)")
		(var cooldownTime:number =			"inviteCooldown - timer.currentServerTime"	(event "timer.evFrequent"))
		(var cooldownTimeText:str = 		"countdownFormat(inviteCooldownEnabled ? cooldownTime : 0, 2, true)")

		(var invitationDisableReason:str =	"	isLeaver								? 'IDS_INVITATION_DISABLE_REASON_PLAYER_IS_OUT_OF_BATTLE' :
												division != NONE_DIVISION_ID			? 'IDS_INVITATION_DISABLE_REASON_ALREADY_IN_DIVISION' :
												!isSelfAlive && !isInBattleLoading		? 'IDS_DIVISION_MANAGEMENT_LOCKED_FOR_DESTROYED' :
												!isPlayerAlive && !isInBattleLoading	? 'IDS_INVITATION_DISABLE_REASON_DESTROYED' :
												!isFreePlacesInDivision					? 'IDS_INVITATION_DISABLE_REASON_NO_FREE_PLACES' :
												!invitationsEnabled						? 'IDS_INVITATION_DISABLE_REASON_INVITATIONS_DISABLED' :
												inviteCooldownEnabled					? tr('IDS_WAIT_TIMEOUT_TO_INVITE_TO_DIVISION')+' '+cooldownTimeText
																						: null")

		(var isDynamicDivisionsEnabled:bool = "isIn(battleType, SC.Common.BATTLE_TYPES.DYNAMIC_DIVISION_AVAILABLE)")

		(var isDivisionControlsEnable:bool = "isDynamicDivisionsEnabled &&
												!isEnemy &&
												(isSelfDivisionCommander || selfDivisionId == NONE_DIVISION_ID) &&
												!isSuspended")

		
		(var chatComponent:gfx =			"$datahub.getSingleComponent(CC.chat)")
		(var isChatServerAvailable:bool =	"chatComponent ? chatComponent.isConnected : false" (event "chatComponent.evConnected") (event "chatComponent.evDisConnected"))
		
		(var contactsGroup:gfx =			"$datahub.getCollection(CC.contactsGroup)")
		(var elementInGroups:gfx =			"_playerEntity.elementInGroups")
		(var canAddGroupEntitiesId:array =	"elementInGroups	? elementInGroups.canAddGroupEntitiesId
																: chatComponent.canAddGroupEntitiesId"
												(event "chatComponent.evRosterChanged")
												(event "elementInGroups.evCanAddGroupEntitiesChanged")
		)

		(var groupIdsOfAccount:array =		"elementInGroups ? elementInGroups.groupIds : null" (event "elementInGroups.evGroupsChanged"))

		
		(macro PLAYER_VOICE_STATE "_playerEntity.avatar.pureName")

		(macro GET_PREF 'selfVoiceChatEnabled' "'sound.voice.chat.enabled'")

		(var canBeInChat:bool = " ((battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE) && selfVoiceChatEnabled && !(isEnemy)) ||
									((isInSameDivision && selfVoiceChatEnabled) && isIn(battleType, SC.Common.BATTLE_TYPES.CHAT_AVAILABLE))")

		
		(struct playerComplainPraiseData = PULL_PLAYER_COMPLAIN_PRAISE_DATA(_battleType = "battleType" _isInSameDivisionOnStart = "isInSameDivisionOnStart" _isEnemy = "isEnemy" _complaintsAvailable = "true"))
	)

	(class $ContextMenuDimensions)
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND _isInfotip="true")
	(style (backgroundColor = "NO_COLOR"))

	(element INFOTIP_SYSTEM_DEFAULT_CONTAINER _hasInsideOffset = true
		
		(block
			(style
				(width = 100%)
				(vgap = "XXS")
			)

			
			(block
				(style (width = 100%))

				(controller $Tooltip
					(renderer = 'SimpleStatusTooltip')
					(bind enabled "isDivisionControlsEnable && !(isSelfAlive || isInBattleLoading)")
					(args
						_text = 'IDS_DIVISION_MANAGEMENT_LOCKED_FOR_DESTROYED'
						_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)

				(controller $Instance renderer='ContextMenuItem'
					(bind enabled "isDivisionControlsEnable && isSelfDivisionCommander && isInSameDivision")
					(args
						_title = 'IDS_APPOINT_PLAYER_TO_COMMANDER'
						_enabled = "isSelfAlive || isInBattleLoading"
						_methods = "[{
										type:	'inputMapping.onAction',
										name:	'changeCommander',
										args:	{	playerId: _playerEntity.avatar.id,
													teamId: _playerEntity.avatar.teamId
												}
									}]"
					)
				)
			)

			(block
				(style (width = 100%))

				(controller $Tooltip
					(renderer = 'SimpleStatusTooltip')
					(bind enabled "isDivisionControlsEnable && !(isSelfAlive || isInBattleLoading)")
					(args
						_text = 'IDS_DIVISION_MANAGEMENT_LOCKED_FOR_DESTROYED'
						_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)

				(controller $Instance renderer='ContextMenuItem'
					(bind enabled "isDivisionControlsEnable && isSelfDivisionCommander && isInSameDivision")
					(args
						_title = 'IDS_EXCLUDE_PLAYER_OUT_OF_DIVISION'
						_enabled = "isSelfAlive || isInBattleLoading"
						_methods = "[{
										type:	'inputMapping.onAction',
										name:	'kickPlayerFromDivision',
										args:	{ playerId: _playerEntity.avatar.id }
								}]"
					)
				)
			)

			(block
				(style (width = 100%))

				(controller $Tooltip
					(renderer = 'SimpleStatusTooltip')
					(bind enabled "isDivisionControlsEnable && !isInSameDivision && !isBot && invitationDisableReason")
					(args
						_text = "invitationDisableReason"
						_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)

				(controller $Instance renderer='ContextMenuItem'
					(bind enabled "isDivisionControlsEnable && !isInSameDivision && invitedPlayerEntity == null")
					(args
						_title='IDS_INVITE_IN_DIVISION'
						_enabled="invitationDisableReason == null"
						_methods="[{
									type:	'inputMapping.onAction',
									name:	'inviteToDivision',
									args:	{	playerId: _playerEntity.avatar.id,
												playerName: _playerEntity.avatar.name,
												inviteType: SC.Pre_battle.PRE_BATTLE_INVITE_TYPE.COMMON
											}
								}]"
					)
				)
			)

			
			(block
				(style (width = 100%))

				(controller $Instance renderer='ContextMenuItem'
					(bind enabled "isDivisionControlsEnable && !isInSameDivision && invitedPlayerEntity != null")
					(args
						_title = 'IDS_RECALL_INVITATION'
						_methods="[{
										type:	'inputMapping.onAction',
										name:	'revokeInvitationToDivision',
										args:	{ id: _playerEntity.avatar.id }
								}]"
					)
				)
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='ContextMenuHorizontalDivider' (bind enabled "isDivisionControlsEnable"))
		)

		(block
			(style
				(width = 100%)
				(vgap = "XXS")
			)	

			
			(block
				(style (width = 100%))

				(controller $Instance renderer='ContextMenuItemExpand'
					(bind enabled "!isInBattleLoading && playerComplainPraiseData.evaluationLimitsInfo != null && !isSuspended")
					(args
						_title			= 'IDS_COMPLAIN'
						_contextElement	= 'EvaluationMenuChildrenItems'
						_enabled		= "!isBot"
						_args			= "{ playerEntity:			_playerEntity,
											childrenCollection:		playerComplainPraiseData.complainCollection,
											disableReason:			playerComplainPraiseData.complainDisabledReason,
											remainCount:			playerComplainPraiseData.evaluationLimitsComplain }"
					)
				)
			)
		
			(block
				(style (width = 100%))

				(controller $Instance renderer='ContextMenuItemExpand'
					(bind enabled "!isInBattleLoading && playerComplainPraiseData.evaluationLimitsInfo != null && !isSuspended")
					(args
						_title			= 'IDS_PRAISE'
						_contextElement	= 'EvaluationMenuChildrenItems'
						_enabled		= "!isBot"
						_args			= "{ playerEntity:			_playerEntity,
											childrenCollection:		playerComplainPraiseData.praiseCollection,
											disableReason:			playerComplainPraiseData.praiseDisabledReason,
											remainCount:			playerComplainPraiseData.evaluationLimitsPraise }"
					)
				)
			)

			
			(block
				(style (width = 100%))

				(controller $Tooltip
					(renderer = 'SimpleStatusTooltip')
					(bind enabled "!isIgnored && !isBot")
					(args
						_text			= "isPlayerMessagesMuted ? 'IDS_UNMUTE_PLAYER_CHAT_HINT' : 'IDS_MUTE_PLAYER_CHAT_HINT'"
						_unifiedStatus	= "SC.Ui_styles.UNIFIED_STATUS.DEFAULT"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)
		
				(controller $Instance renderer='ContextMenuItem'
					(bind enabled "!isIgnored")
					(args
						_title			= "isPlayerMessagesMuted ? 'IDS_UNMUTE_PLAYER_CHAT' : 'IDS_MUTE_PLAYER_CHAT'"
						_enabled		= "!isBot"
						_methods		= "[{ type:	'inputMapping.onAction',
											name:	isPlayerMessagesMuted ? 'unmuteUser' : 'muteUser',
											args:	{ id: _playerEntity.avatar.id }}]"
					)
				)
			)

			
			(block
				(style (width = 100%))

				(controller $Instance renderer='VoiceChatMenuItem'
					(bind enabled "!isIgnored && canBeInChat && !isBot && !isSuspended")
					(args
						_playerVoiceState	= "playerVoiceState"
						_actionType			= 'direct.action'
						_action				= 'toggleVoice'
						_actionArgs			= "{ 'playerName':	_playerEntity.avatar.pureName,
												'nickName':	_playerEntity.avatar.name }"
					)
				)
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='ContextMenuHorizontalDivider' (bind enabled "!isSuspended"))
		)

		(block
			(style
				(width = 100%)
				(vgap = "XXS")
			)	

			
			(block
				(style (width = 100%))

				(controller $Tooltip
					(renderer = 'SimpleStatusTooltip')
					(bind enabled "!isSuspended && !isChatServerAvailable && !isBot")
					(args
						_text = 'IDS_CONTACT_DISABLE_REASON_SERVER_CHAT_DISABLED'
						_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
					)
					(macro DEFAULT_TOOLTIP_BEHAVIOUR)
				)

				(block
					(style (width = 100%))

					(controller $Instance renderer='ContextMenuItem'
						(bind enabled "!isSuspended && !isIgnored")
						(args
							_title			= "groupIdsOfAccount == null ? 'IDS_ADD_TO_CONTACTS' : 'IDS_REMOVE_FROM_CONTACTS'"
							_enabled		= "isChatServerAvailable && !isBot"
							_methods		= "[{ type:	'inputMapping.onAction',
												name:	groupIdsOfAccount == null ? 'addContact' : 'removeContact',
												args:	{ dbId: _playerEntity.accountSimple.dbId }}]"
						)
					)
				)

				(block
					(style (width = 100%))

					(controller $Instance renderer='ContextMenuItemExpand'
						(bind enabled "!isSuspended && !isIgnored && ((canAddGroupEntitiesId.length > 0) && (contactsGroup.items.length > 1))")
						(args
							_title			= 'IDS_ADD_TO_GROUP'
							_enabled		= "!isBot"
							_contextElement	= 'MoveToChatGroupMenuChildrenItems'
							_args			= "{ playerEntity:		_playerEntity,
												groupEntitiesIds:	canAddGroupEntitiesId }"
						)
					)
				)

				(block
					(style (width = 100%))

					(controller $Tooltip
						(renderer = 'SimpleStatusTooltip')
						(args
							_text = "isIgnored ? 'IDS_NOT_IGNORE_PLAYER_HINT' : 'IDS_IGNORE_PLAYER_HINT'"
						)
						(macro DEFAULT_TOOLTIP_BEHAVIOUR)
					)

					(controller $Instance renderer='ContextMenuItem'
						(bind enabled "!isSuspended")
						(args
							_title			= "isIgnored ? 'IDS_NOT_IGNORE_PLAYER' : 'IDS_IGNORE_PLAYER'"
							_enabled		= "isChatServerAvailable && !isBot"
							_methods		= "[{ type:	'inputMapping.onAction',
												name:	'userIgnoreContact',
												args:	{	dbId: _playerEntity.accountSimple.dbId,
															ignore: !isIgnored }}]"
						)
					)
				)
			)

			(block
				(style (width = 100%))
				(controller $Instance renderer='InvitationToClanMenuItem'
					(bind enabled "_selfPlayer.clanman")
					(args
						_selfClanman	= "_selfPlayer.clanman"
						_playerEntity	= "_playerEntity"
						_isBot			= "isBot"
					)
				)
			)

			
			(block
				(style (width = 100%))

				(controller $Instance renderer='ContextMenuItem'
					(bind enabled "isSuspended")
					(args
						_title = 'IDS_NO_AVAILABLE_ACTIONS'
						_enabled = "!isBot"
					)
				)
			)
		)

		
		(block
			(style (width = 100%))
			(controller $Instance renderer='ContextMenuHorizontalDivider' (bind enabled "isBot"))
		)
	
		(block
			(bind visible "isBot")
			(style
				(width = 100%)
				(paddingLeft = "SXS")
				(marginTop = "S")
				(marginBottom = "S")
			)
			(controller $Instance renderer='StatusLine'
				(bind enabled "isBot")
				(args
					_text = 'IDS_BOT_WARNING'
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.ATTENTION"
				)
			)
		)
	)
)